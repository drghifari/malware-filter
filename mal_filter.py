import csv
import random
import re
import numpy as np
import pandas as pd
from sklearn import metrics
from sklearn import svm
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split


delimiters = [
                ".", "/", ":", ";", "=", "?", "%", "_", "+", "-", "&", "@", "~",
                "^", "*", "`", "'", '"', ">", "<", "{", "}", "|", "[", "]", "#",
                "$", "(", ")"
            ]

def split(delimiters, string, maxsplit=0):
    regexPattern = '|'.join(map(re.escape, delimiters))
    return re.split(regexPattern, string, maxsplit)

def tokenize(input):
    word = split(delimiters, input)
    word = filter(None, word)
    token = list(set(word))
    if 'com' in token:
        token.remove('com')
    return token

rawdata = pd.read_csv('data/url.csv',',',error_bad_lines=False)
data = pd.DataFrame(rawdata)
data = np.array(data)
random.shuffle(data)

x = [i[0] for i in data]
y = [i[1] for i in data]

vectorizer = TfidfVectorizer(tokenizer=tokenize)
X = vectorizer.fit_transform(x)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=300)

# LinearSVC
lin_svc = svm.LinearSVC(C=1.0, class_weight="balanced").fit(X_train, y_train)

print("Starting predict")
y_pred = lin_svc.predict(X_test)
print("Confusion matrix:\n", metrics.confusion_matrix(y_test, y_pred))
print("Classification Report:\n", metrics.classification_report(y_test, y_pred))
print("Accuracy:", metrics.accuracy_score(y_test, y_pred))
